// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBusinessStmt, err = db.PrepareContext(ctx, createBusiness); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBusiness: %w", err)
	}
	if q.createMenuItemStmt, err = db.PrepareContext(ctx, createMenuItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMenuItem: %w", err)
	}
	if q.createReservationStmt, err = db.PrepareContext(ctx, createReservation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReservation: %w", err)
	}
	if q.deactivateBusinessStmt, err = db.PrepareContext(ctx, deactivateBusiness); err != nil {
		return nil, fmt.Errorf("error preparing query DeactivateBusiness: %w", err)
	}
	if q.getAllBusinessesStmt, err = db.PrepareContext(ctx, getAllBusinesses); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllBusinesses: %w", err)
	}
	if q.getBusinessStmt, err = db.PrepareContext(ctx, getBusiness); err != nil {
		return nil, fmt.Errorf("error preparing query GetBusiness: %w", err)
	}
	if q.updateBusinessOperationsStmt, err = db.PrepareContext(ctx, updateBusinessOperations); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBusinessOperations: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBusinessStmt != nil {
		if cerr := q.createBusinessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBusinessStmt: %w", cerr)
		}
	}
	if q.createMenuItemStmt != nil {
		if cerr := q.createMenuItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMenuItemStmt: %w", cerr)
		}
	}
	if q.createReservationStmt != nil {
		if cerr := q.createReservationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReservationStmt: %w", cerr)
		}
	}
	if q.deactivateBusinessStmt != nil {
		if cerr := q.deactivateBusinessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deactivateBusinessStmt: %w", cerr)
		}
	}
	if q.getAllBusinessesStmt != nil {
		if cerr := q.getAllBusinessesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllBusinessesStmt: %w", cerr)
		}
	}
	if q.getBusinessStmt != nil {
		if cerr := q.getBusinessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBusinessStmt: %w", cerr)
		}
	}
	if q.updateBusinessOperationsStmt != nil {
		if cerr := q.updateBusinessOperationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBusinessOperationsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createBusinessStmt           *sql.Stmt
	createMenuItemStmt           *sql.Stmt
	createReservationStmt        *sql.Stmt
	deactivateBusinessStmt       *sql.Stmt
	getAllBusinessesStmt         *sql.Stmt
	getBusinessStmt              *sql.Stmt
	updateBusinessOperationsStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createBusinessStmt:           q.createBusinessStmt,
		createMenuItemStmt:           q.createMenuItemStmt,
		createReservationStmt:        q.createReservationStmt,
		deactivateBusinessStmt:       q.deactivateBusinessStmt,
		getAllBusinessesStmt:         q.getAllBusinessesStmt,
		getBusinessStmt:              q.getBusinessStmt,
		updateBusinessOperationsStmt: q.updateBusinessOperationsStmt,
	}
}
