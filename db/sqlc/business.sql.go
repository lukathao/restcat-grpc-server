// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: business.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createBusiness = `-- name: CreateBusiness :one
INSERT INTO business (
  business_name, business_owner, address_street, address_city, address_state, address_zipcode, business_days, business_hours, seating, business_type, is_active, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
)
RETURNING business_id, business_name, business_owner, address_street, address_city, address_state, address_zipcode, business_hours, business_days, seating, business_type, is_active, created_at, updated_at
`

type CreateBusinessParams struct {
	BusinessName   sql.NullString `json:"business_name"`
	BusinessOwner  sql.NullString `json:"business_owner"`
	AddressStreet  sql.NullString `json:"address_street"`
	AddressCity    sql.NullString `json:"address_city"`
	AddressState   sql.NullString `json:"address_state"`
	AddressZipcode sql.NullString `json:"address_zipcode"`
	BusinessDays   []int32        `json:"business_days"`
	BusinessHours  []int32        `json:"business_hours"`
	Seating        sql.NullInt32  `json:"seating"`
	BusinessType   sql.NullString `json:"business_type"`
	IsActive       sql.NullBool   `json:"is_active"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (Business, error) {
	row := q.queryRow(ctx, q.createBusinessStmt, createBusiness,
		arg.BusinessName,
		arg.BusinessOwner,
		arg.AddressStreet,
		arg.AddressCity,
		arg.AddressState,
		arg.AddressZipcode,
		pq.Array(arg.BusinessDays),
		pq.Array(arg.BusinessHours),
		arg.Seating,
		arg.BusinessType,
		arg.IsActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Business
	err := row.Scan(
		&i.BusinessID,
		&i.BusinessName,
		&i.BusinessOwner,
		&i.AddressStreet,
		&i.AddressCity,
		&i.AddressState,
		&i.AddressZipcode,
		pq.Array(&i.BusinessHours),
		pq.Array(&i.BusinessDays),
		&i.Seating,
		&i.BusinessType,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateBusiness = `-- name: DeactivateBusiness :exec
UPDATE business
SET is_active = false
WHERE business_id = $1
`

func (q *Queries) DeactivateBusiness(ctx context.Context, businessID int32) error {
	_, err := q.exec(ctx, q.deactivateBusinessStmt, deactivateBusiness, businessID)
	return err
}

const getAllBusinesses = `-- name: GetAllBusinesses :many
SELECT business_id, business_name, business_owner, address_street, address_city, address_state, address_zipcode, business_hours, business_days, seating, business_type, is_active, created_at, updated_at FROM business
ORDER BY business_name
`

func (q *Queries) GetAllBusinesses(ctx context.Context) ([]Business, error) {
	rows, err := q.query(ctx, q.getAllBusinessesStmt, getAllBusinesses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Business
	for rows.Next() {
		var i Business
		if err := rows.Scan(
			&i.BusinessID,
			&i.BusinessName,
			&i.BusinessOwner,
			&i.AddressStreet,
			&i.AddressCity,
			&i.AddressState,
			&i.AddressZipcode,
			pq.Array(&i.BusinessHours),
			pq.Array(&i.BusinessDays),
			&i.Seating,
			&i.BusinessType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBusiness = `-- name: GetBusiness :one
SELECT business_id, business_name, business_owner, address_street, address_city, address_state, address_zipcode, business_hours, business_days, seating, business_type, is_active, created_at, updated_at FROM business
WHERE business_id = $1 LIMIT 1
`

func (q *Queries) GetBusiness(ctx context.Context, businessID int32) (Business, error) {
	row := q.queryRow(ctx, q.getBusinessStmt, getBusiness, businessID)
	var i Business
	err := row.Scan(
		&i.BusinessID,
		&i.BusinessName,
		&i.BusinessOwner,
		&i.AddressStreet,
		&i.AddressCity,
		&i.AddressState,
		&i.AddressZipcode,
		pq.Array(&i.BusinessHours),
		pq.Array(&i.BusinessDays),
		&i.Seating,
		&i.BusinessType,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBusinessOperations = `-- name: UpdateBusinessOperations :exec
UPDATE business
SET address_street = $2, address_city = $3, address_state = $4, address_zipcode = $5, business_days = $6, business_hours = $7, seating = $8, business_type = $9, updated_at = $10
WHERE business_id = $1
`

type UpdateBusinessOperationsParams struct {
	BusinessID     int32          `json:"business_id"`
	AddressStreet  sql.NullString `json:"address_street"`
	AddressCity    sql.NullString `json:"address_city"`
	AddressState   sql.NullString `json:"address_state"`
	AddressZipcode sql.NullString `json:"address_zipcode"`
	BusinessDays   []int32        `json:"business_days"`
	BusinessHours  []int32        `json:"business_hours"`
	Seating        sql.NullInt32  `json:"seating"`
	BusinessType   sql.NullString `json:"business_type"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateBusinessOperations(ctx context.Context, arg UpdateBusinessOperationsParams) error {
	_, err := q.exec(ctx, q.updateBusinessOperationsStmt, updateBusinessOperations,
		arg.BusinessID,
		arg.AddressStreet,
		arg.AddressCity,
		arg.AddressState,
		arg.AddressZipcode,
		pq.Array(arg.BusinessDays),
		pq.Array(arg.BusinessHours),
		arg.Seating,
		arg.BusinessType,
		arg.UpdatedAt,
	)
	return err
}
